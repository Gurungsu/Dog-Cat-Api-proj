"use strict";

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_axios.default.get(`https://dog.ceo/api/breeds/image/random/3`).then(r => r.data).then(dogData => {
  console.log(dogData); // Access the entire response
  // or

  console.log(dogData.message); // Access only part of the response
});

let theInput;
let thebutton;
theInput = document.querySelector("#userInput > input[type=text]");
thebutton = document.querySelector("#userInput > button");
let breedLimit = Number(theInput?.value);
let tableBody;
tableBody = document.querySelector("#progOutput table > tbody");
console.log(thebutton);
thebutton?.addEventListener("click", () => {
  let oldRows;
  oldRows = tableBody?.querySelectorAll("tr");

  if (oldRows) {
    for (let k = 0; k < oldRows?.length; k++) {
      const oldOne = oldRows[k];
      tableBody?.removeChild(oldOne);
    }
  }

  _axios.default.get(catURL, {
    params: {
      limit: breedLimit
    }
  }).then(r => r.data).then(breeds => {
    const meowArr = breeds.map(b => {
      return {
        name: b.name,
        description: b.description,
        image: b.image
      };
    });
    return meowArr;
  }).then(meows => {
    let tableBody;
    tableBody = document.querySelector("#progOutput table > tbody");

    for (let i = 0; i < breedLimit; i++) {
      const catImage = document.createElement("img");
      catImage.setAttribute("src", meows[i].image.url);
      const tr = document.createElement("tr");
      const meowNameCell = document.createElement("td");
      meowNameCell.appendChild(document.createTextNode(meows[i].name));
      const meowDescCell = document.createElement("td");
      meowDescCell.appendChild(document.createTextNode(meows[i].description));
      const meowImagCell = document.createElement("td");
      meowImagCell.appendChild(catImage);
      tr.appendChild(meowNameCell);
      tr.appendChild(meowDescCell);
      tr.appendChild(meowImagCell);
      tableBody?.appendChild(tr);
    }
  });
});
if (isNaN(breedLimit)) breedLimit = 3;
const catURL = "https://api.thecatapi.com/v1/breeds";

_axios.default.get(catURL, {
  params: {
    limit: breedLimit
  }
}).then(r => r.data).then(breeds => {
  const meowArr = breeds.map(b => {
    return {
      name: b.name,
      description: b.description,
      image: b.image
    };
  });
  return meowArr;
}).then(meows => {
  let tableBody;
  tableBody = document.querySelector("#progOutput table > tbody");
  meows.forEach(m => {
    const catImage = document.createElement("img");
    catImage.setAttribute("src", m.image.url);
    const tr = document.createElement("tr");
    const meowNameCell = document.createElement("td");
    meowNameCell.appendChild(document.createTextNode(m.name));
    const meowDescCell = document.createElement("td");
    meowDescCell.appendChild(document.createTextNode(m.description));
    const meowImagCell = document.createElement("td");
    meowImagCell.appendChild(catImage);
    tr.appendChild(meowNameCell);
    tr.appendChild(meowDescCell);
    tr.appendChild(meowImagCell);
    tableBody?.appendChild(tr);
  });
}); //---------------------------------------------------------------
//GLOBAL VARIABLES


const randomButton = document.querySelector('.random');
const dogList = document.getElementById('doggoDropDown');
const listButton = document.querySelector('.list'); //EVENT LISTENERS

addEventListener('load', populateList);
addEventListener('load', getDogTerm); //click and change

dogList.addEventListener('change', getBreedImage);
listButton?.addEventListener('click', getBreedImage); //FETCH CALLS
//wikipedia dog term serach

let breed = Number(dogList?.value); // convert string to number
// NaN = Not a Number

const dogURL = "https://api.thedogapi.com/v1/breeds";

_axios.default.get(dogURL, {
  params: {
    limit: breed
  }
}).then(r => r.data).then(breeds => {
  if (isNaN(breed)) breed = 10;
});

function getDogTerm() {
  fetch('https://en.wikipedia.org/w/api.php?action=opensearch&origin=*&search=dog&formatversion=2').then(checkStatus).then(response => response.json()).then(data => displayDogInfo(data)).catch(error => notifyUser(error));
} //populate List


function populateList() {
  fetch('https://dog.ceo/api/breeds/list/all').then(checkStatus).then(response => response.json()).then(data => createListItems(data.message)).catch(error => notifyUser(error));
} //getBreedImage


function getBreedImage() {
  //get list value
  let selectedBreed = dogList.options[dogList.selectedIndex].value; //build url

  let url = `https://dog.ceo/api/breed/${selectedBreed}/images`; //fetch call

  fetch(url).then(checkStatus).then(response => response.json()).then(data => getImageURL(data.message)).catch(error => console.log(error));
}

if (isNaN(breedLimit)) breedLimit = 3; //HELPER FUNCTIONS
//checkStatus

function checkStatus(response) {
  if (response.ok) {
    return Promise.resolve(response);
  } else {
    return Promise.reject(new Error(response.statusText));
  }
} //display Dog Info


function displayDogInfo(data) {
  //populate paragraph
  document.getElementById('dogInfo').innerHTML = `<strong>${capitalize(data[1])}:</strong> ${data} 
   <a href="${data[3][0]}" 
   alt="read more on wikipedia"> 
   Read more on wikipedia</a>`;
} //getImageURL


function getImageURL(data) {
  //get random number
  let randomNumberURL = data[Math.floor(Math.random() * data.length) + 1];
  listImageContainer.innerHTML = `<img src="${randomNumberURL}" alt="${extractBreedName(data)}"/>`;
} //createListItems


function createListItems(data) {
  let output = '';
  Object.keys(data).forEach(key => output += `<option value="${key}">${fixBreed(key)}</option>`);
  document.getElementById(newFunction()).innerHTML = output;

  function newFunction() {
    return 'doggoDropDown';
  }
} //fixBreed


function fixBreed(breedName) {
  if (breedName === 'germanshepherd') {
    return 'German Shepherd';
  } else if (breedName === 'mexicanhairless') {
    return 'Mexican Hairless';
  }

  return capitalize(breedName);
} //capitalize breed name


function capitalize(breedName) {
  return breedName.replace(/\-/g, ' ').split(" ").map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
} //extract breed name


function extractBreedName(data) {
  let regex = newFunction();
  let mapBreed = regex.exec(data);
  return fixBreed(mapBreed[1]);

  function newFunction() {
    return /https:\/\/images\.dog\.ceo\/breeds\/(\w+-?\w+)\/\w+\.\w+/g;
  }
}

function notifyUser(error) {
  throw new Error("Function not implemented.");
}

function handleData(data) {
  throw new Error("Function not implemented.");
}

function createGrid(message) {
  throw new Error("Function not implemented.");
}