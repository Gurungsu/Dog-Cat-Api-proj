"use strict";

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_axios.default.get(`https://dog.ceo/api/breeds/image/random/3=${breedImage}`).then(r => r.data).then(dogData => {
  console.log(dogData); // Access the entire response
  // or

  console.log(dogData.message);
});

let theButton;
let theInput;
theInput = document.querySelector("#userInput > input[type=text]");
theButton = document.querySelector("#userInput > button");
theButton?.addEventListener("click", () => {
  const inputLen = theInput?.value.length ?? 0;
  if (inputLen > 0) console.log("You entered", theInput?.value);else console.log("Please enter some text");
});
let breedLimit = Number(theInput?.value); //---------------------------------------------------------------

if (isNaN(breedLimit)) breedLimit = 2;
const catURL = `https://api.thecatapi.com/v1/breeds`;

_axios.default.get(catURL, {
  params: {
    limit: breedLimit
  }
}).then(r => r.data).then(breeds => {
  const meowArr = breeds.map(b => {
    return {
      name: b.name,
      description: b.description,
      image: b.image
    };
  });
  return meowArr;
}).then(meows => {
  let tableBody;
  tableBody = document.querySelector("#progOutput table > tbody");
  meows.forEach(m => {
    const catImage = document.createElement("img");
    catImage.setAttribute("src", m.image.url);
    let oldRows;
    const row = document.createElement("tr");
    const Cell1 = document.createElement("td");
    const Cell2 = document.createElement("td");
    const Cell3 = document.createElement("td");
    Cell3.appendChild(catImage);
    row.appendChild(Cell3);
    row.appendChild(Cell2);
    row.appendChild(Cell1);
    Cell1.appendChild(document.createTextNode(m.name));
    Cell2.appendChild(document.createTextNode(m.description));
    tableBody?.appendChild(row);
  });
});

const dogList = document.getElementById('DogSelector');
const listButton = document.querySelector('.list');
addEventListener('load', listing);
addEventListener('load', dogList); //click and change

dogList.addEventListener('change', breedImage);
listButton?.addEventListener('click', breedImage); //populate List

function listing() {
  fetch('https://dog.ceo/api/breeds/list/all').then(status).then(response => response.json()).then(data => listItems(data.message)).catch(error => user(error));
} //breedImage


function breedImage() {
  //get list value
  let selectedBreed = dogList.options[dogList.selectedIndex].value; //build url

  let url = `https://dog.ceo/api/breed/${selectedBreed}/images`; //fetch call

  fetch(url).then(status).then(response => response.json()).then(data => getImageURL(data.message)).catch(error => console.log(error));
} //status


function status(response) {
  if (response.ok) {
    return Promise.resolve(response);
  } else {
    return Promise.reject(new Error(response.statusText));
  }
} //display Dog Info


function displayDogInfo(data) {
  //populate paragraph
  document.getElementById('dogInfo').innerHTML = `<strong>${cap + -italize(data[1])}:</strong> ${data} 
   <a href="${data[3][3]}" 
   alt="read more on wikipedia"> 
   Read more on wikipedia</a>`;
}

function getImageURL(data) {
  //get random number
  let randomNumberURL = data[Math.floor(Math.random() * data.length) + 1];
  listImageContainer.innerHTML = `<img src="${randomNumberURL}" alt="${moreBreeds(data)}"/>`;
} //listItems


function listItems(data) {
  let output = '';
  Object.keys(data).forEach(key => output += `<option value="${key}">${breedNames(key)}</option>`);
  document.getElementById(newFunction()).innerHTML = output;

  function newFunction() {
    return 'DogSelector';
  }
} //breedNames


function breedNames(breedName) {
  if (breedName === 'germanshepherd') {
    return 'German Shepherd';
  } else if (breedName === 'mexicanhairless') {
    return 'Mexican Hairless';
  }

  return capitalize(breedName);
} //capitalize breed name


function capitalize(breedName) {
  return breedName.replace(/\-/g, ' ').split(" ").map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
} //extract breed name


function moreBreeds(data) {
  let regex = newFunction();
  let mapBreed = regex.exec(data);
  return breedNames(mapBreed[1]);

  function newFunction() {
    return /https:\/\/images\.dog\.ceo\/breeds\/(\w+-?\w+)\/\w+\.\w+/g;
  }
}

function user(error) {
  throw new Error("Function not implemented.");
}

function handleData(data) {
  throw new Error("Function not implemented.");
}