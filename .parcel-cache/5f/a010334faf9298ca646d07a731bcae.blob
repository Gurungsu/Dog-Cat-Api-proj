"use strict";

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_axios.default.get("https://dog.ceo/.......").then(r => r.data).then(dogData => {
  console.log(dogData); // Access the entire response
  // or

  console.log(dogData.message); // Access only part of the response
});

let theInput;
let thebutton;
theInput = document.querySelector("#userInput > input[type=text]");
thebutton = document.querySelector("#userInput > button");
thebutton?.addEventListener("click", () => {
  const inputLen = theInput?.value.length ?? 0;
  if (inputLen > 0) console.log("You entered", theInput?.value);else console.log("Please enter some text");
  let breedLimit = Number(theInput?.value); // convert string to number
  // NaN = Not a Number

  const catURL = "https://api.thecatapi.com/v1/breeds";

  _axios.default.get(catURL, {
    params: {
      limit: breedLimit
    }
  }).then(r => r.data).then(breeds => {
    if (isNaN(breedLimit)) breedLimit = 10;
  });
}); //---------------------------------------------------------------
//GLOBAL VARIABLES

const randomButton = document.querySelector('.random');
const dogList = document.getElementById('doggoDropDown');
const listButton = document.querySelector('.list'); //EVENT LISTENERS

addEventListener('load', populateList);
addEventListener('load', getDogTerm); //click and change

dogList.addEventListener('change', getBreedImage);
listButton?.addEventListener('click', getBreedImage); //FETCH CALLS
//wikipedia dog term serach

function getDogTerm() {
  fetch('https://en.wikipedia.org/w/api.php?action=opensearch&origin=*&search=dog&formatversion=2').then(checkStatus).then(response => response.json()).then(data => displayDogInfo(data)).catch(error => notifyUser(error));
} //populate List


function populateList() {
  fetch('https://dog.ceo/api/breeds/list/all').then(checkStatus).then(response => response.json()).then(data => createListItems(data.message)).catch(error => notifyUser(error));
} //getBreedImage


function getBreedImage() {
  //get list value
  let selectedBreed = dogList.options[dogList.selectedIndex].value; //build url

  let url = `https://dog.ceo/api/breed/${selectedBreed}/images`; //fetch call

  fetch(url).then(checkStatus).then(response => response.json()).then(data => getImageURL(data.message)).catch(error => console.log(error));
}

fetch(url2).then(checkStatus).then(response => response.json()).then(data => getImageURL(data.message)).catch(error => console.log(error));

function createImageGrid() {
  fetch('https://dog.ceo/api/breeds/image/random/3').then(checkStatus).then(response => response.json()).then(data => createGrid(data.message)).catch(error => notifyUser(error));
} //HELPER FUNCTIONS
//checkStatus


function checkStatus(response) {
  if (response.ok) {
    return Promise.resolve(response);
  } else {
    return Promise.reject(new Error(response.statusText));
  }
} //display Dog Info


function displayDogInfo(data) {
  //populate paragraph
  document.getElementById('dogInfo').innerHTML = `<strong>${capitalize(data[0])}:</strong> ${data[2][0]} 
   <a href="${data[3][0]}" 
   alt="read more on wikipedia"> 
   Read more on wikipedia</a>`;
} //getImageURL


function getImageURL(data) {
  //get random number
  let randomNumberURL = data[Math.floor(Math.random() * data.length) + 1];
  listImageContainer.innerHTML = `<img src="${randomNumberURL}" alt="${extractBreedName(data)}"/>`;
} //createListItems


function createListItems(data) {
  let output = '';
  Object.keys(data).forEach(key => output += `<option value="${key}">${fixBreed(key)}</option>`);
  document.getElementById(newFunction()).innerHTML = output;

  function newFunction() {
    return 'doggoDropDown';
  }
} //fixBreed


function fixBreed(breedName) {
  if (breedName === 'germanshepherd') {
    return 'German Shepherd';
  } else if (breedName === 'mexicanhairless') {
    return 'Mexican Hairless';
  }

  return capitalize(breedName);
} //capitalize breed name


function capitalize(breedName) {
  return breedName.replace(/\-/g, ' ').split(" ").map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
} //extract breed name


function extractBreedName(data) {
  let regex = newFunction();
  let mapBreed = regex.exec(data);
  return fixBreed(mapBreed[1]);

  function newFunction() {
    return /https:\/\/images\.dog\.ceo\/breeds\/(\w+-?\w+)\/\w+\.\w+/g;
  }
}

function notifyUser(error) {
  throw new Error("Function not implemented.");
}

function handleData(data) {
  throw new Error("Function not implemented.");
}

function createGrid(message) {
  throw new Error("Function not implemented.");
}