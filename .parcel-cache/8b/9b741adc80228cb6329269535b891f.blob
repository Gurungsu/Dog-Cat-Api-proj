"use strict";

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let theInput;
let thebutton;
theInput = document.querySelector("#userInput > input[type=text]");
thebutton = document.querySelector("#userInput > button");
let breedLimit = Number(theInput?.value);
let tableBody;
tableBody = document.querySelector("#progOutput table > tbody");
console.log(thebutton);
thebutton?.addEventListener("click", () => {
  let oldRows;
  oldRows = tableBody?.querySelectorAll("tr");

  if (oldRows) {
    for (let k = 0; k < oldRows?.length; k++) {
      const oldOne = oldRows[k];
      tableBody?.removeChild(oldOne);
    }
  }

  _axios.default.get(catURL, {
    params: {
      limit: breedLimit
    }
  }).then(r => r.data).then(breeds => {
    const meowArr = breeds.map(b => {
      return {
        name: b.name,
        description: b.description,
        image: b.image
      };
    });
    return meowArr;
  }).then(meows => {
    let tableBody;
    tableBody = document.querySelector("#progOutput table > tbody");

    for (let i = 0; i < breedLimit; i++) {
      const catImage = document.createElement("img");
      catImage.setAttribute("src", meows[i].image.url);
      const tr = document.createElement("tr");
      const meowNameCell = document.createElement("td");
      meowNameCell.appendChild(document.createTextNode(meows[i].name));
      const meowDescCell = document.createElement("td");
      meowDescCell.appendChild(document.createTextNode(meows[i].description));
      const meowImagCell = document.createElement("td");
      meowImagCell.appendChild(catImage);
      tr.appendChild(meowNameCell);
      tr.appendChild(meowDescCell);
      tr.appendChild(meowImagCell);
      tableBody?.appendChild(tr);
    }
  });
});
if (isNaN(breedLimit)) breedLimit = 10;
const catURL = "https://api.thecatapi.com/v1/breeds";

_axios.default.get(catURL, {
  params: {
    limit: breedLimit
  }
}).then(r => r.data).then(breeds => {
  const meowArr = breeds.map(b => {
    return {
      name: b.name,
      description: b.description,
      image: b.image
    };
  });
  return meowArr;
});

_axios.default.get("https://dog.ceo/api/breed/hound/images").then(r => r.data).then(dogPics => {
  let tableBody;
  tableBody = document.querySelector("#progOutputDog table > tbody");

  for (let i = 0; i < 10; i++) {
    const dogImage = document.createElement("img");
    dogImage.setAttribute("src", dogPics.message[i]);
    tableBody?.appendChild(dogImage);
  }
});